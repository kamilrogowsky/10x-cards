name: Pull Request CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "22.14.0"

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  test:
    name: Run tests with coverage
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  status-comment:
    name: Post PR status comment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Post success comment
        if: needs.lint.result == 'success' && needs.test.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read coverage summary if it exists
            let coverageText = '';
            const coverageSummaryPath = path.join('coverage', 'coverage-summary.json');
            
            if (fs.existsSync(coverageSummaryPath)) {
              try {
                const coverageData = JSON.parse(fs.readFileSync(coverageSummaryPath, 'utf8'));
                const totalCoverage = coverageData.total;
                
                const formatCoverage = (metric) => {
                  const pct = metric.pct;
                  const emoji = pct >= 90 ? '🟢' : pct >= 70 ? '🟡' : '🔴';
                  return `${emoji} ${pct}%`;
                };

                coverageText = `

            ## 📊 Test Coverage
            
            | Metric      | Coverage |
            |-------------|----------|
            | Lines       | ${formatCoverage(totalCoverage.lines)} |
            | Functions   | ${formatCoverage(totalCoverage.functions)} |
            | Branches    | ${formatCoverage(totalCoverage.branches)} |
            | Statements  | ${formatCoverage(totalCoverage.statements)} |
            `;
              } catch (error) {
                console.log('Could not parse coverage summary:', error.message);
              }
            }

            const comment = `## ✅ Pull Request Validation Results

            All checks have passed successfully! 🎉

            - ✅ **Linting**: Code style and quality checks passed
            - ✅ **Tests**: All tests are passing${coverageText}

            ---
            *This comment was automatically generated by the PR validation workflow.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Post failure comment
        if: needs.lint.result != 'success' || needs.test.result != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const lintResult = '${{ needs.lint.result }}';
            const testResult = '${{ needs.test.result }}';
            
            const lintStatus = lintResult === 'success' ? '✅' : '❌';
            const testStatus = testResult === 'success' ? '✅' : '❌';
            
            let failureDetails = '';
            if (lintResult !== 'success') {
              failureDetails += '\n- 🔍 **Linting issues found**: Please fix code style and quality issues before proceeding.';
            }
            if (testResult !== 'success') {
              failureDetails += '\n- 🧪 **Test failures detected**: Some tests are failing. Please review and fix the failing tests.';
            }

            const comment = `## ❌ Pull Request Validation Failed

            Some checks have failed and need attention before this PR can be merged.

            ### Results Summary:
            - ${lintStatus} **Linting**: ${lintResult === 'success' ? 'Passed' : 'Failed'}
            - ${testStatus} **Tests**: ${testResult === 'success' ? 'Passed' : 'Failed'}

            ### Action Required:
            ${failureDetails}

            Please fix the issues above and push your changes to trigger a new validation run.

            ---
            *This comment was automatically generated by the PR validation workflow.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 